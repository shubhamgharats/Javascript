1. "var" and "let" are same, but we use "var" which help us avoid scope problem.

2. Prefer not to use var to avoid issue in block scope and functional scope

3. "use strict"; // treats all JS Code as newer version
 
4. alert( 3+3 ) // This can be done in console of browser engine only, not in nodejs 

5. We avoid semicolon in JS and React

6. Datatype: a) number
             b) bigint => For big Values
             c) string
             d) boolean
             e) null => STANDALONE value
             f) undefined => value not given/defined
             e) symbol => unique
             f) object

7. 'console.log(typeof null)' => give out put as 'Object'=> Is said to be error in language

8. Convert to Number: "33" => 33
                      "33abc" => NaN(Not a Number)
                       true =>1 false=>0

9. Comparisons: console.log(null > 0);  =>false
                console.log(null == 0); =>false
                console.log(null >= 0); =>true

10. === {is Strict Check}

11. Two category of DataTypes: 1) Primitive
                               2) Non-Primitive(Reference Type)

12. Primitive: 7 types
               String, Number, Boolean, Null, Undefined, Symbol, BigInt

13. Non-Primitive: 3 types
                   Array, Objects, Functions

14. Stack memory is used for Primitive DataTypes.(Copy milta hain)
    Heap memory is used for Non-Primitive DataTypes.(Reference milta hain)

15. console.log(gameName[0])
    console.log(gameName.__proto__);
    console.log(gameName.length);
    console.log(gameName.toUpperCase());
    console.log(gameName.charAt(2));
    console.log(gameName.indexOf('t'));
    console.log(newString);
    console.log(anotherString);
    console.log(url.replace('%20','-'))
    console.log(url.includes(sundar))
    console.log(gameName.split('-'))

16. console.log(balance.toString().length); => Convert number to String and than identify its Length.
    
    console.log(balance.toFixed(2)); => Gives number with two numbers after decimal point.

    console.log(otherNumber.toPrecision(4)); => Will give Precision(roundedoff) value with 4 digits.
 
    const hundreds = 100000000
    console.log(hundreds.toLocaleString('en-IN'));
    => convert 100000000 to 10,00,00,000  ||
                                         \\//
                                          \/
                                      In Indian Standards

17. console.log(Math);
    console.log(Math.abs(-4));
    console.log(Math.round(4.3));
    console.log(Math.ceil(4.3));
    console.log(Math.floor(4.3));
    console.log(Math.max(4,7,3,5));
    console.log(Math.min(4,7,3,5));

18. console.log(Math.random()); => Gives random value btw 0 and 1.

    console.log((Math.random()*10) +1); => Gives random value above 1.

    console.log(Math.floor(Math.random() * (max - min + 1)) + min); => Gives value between required Min and Max.

19. let myDate = new Date()
    console.log(myDate.toString());
    console.log(myDate.toDateString());
    console.log(myDate.toISOString());
    console.log(myDate.toJSON());
    console.log(myDate.toLocaleString());
    console.log(myDate.toLocaleTimeString());

    console.log(typeof myDate); => Type of Data is OBJECT

18. let myTimeStamp = Date.now(); => Gives live Timestamp

    console.log(Math.floor(Date.now()/1000)); => Gives time in seconds

